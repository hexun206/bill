package com.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table DIRECT_BEAN.
 */
public class DirectBeanDao extends AbstractDao<DirectBean, Long> {

    public static final String TABLENAME = "DIRECT_BEAN";

    /**
     * Properties of entity DirectBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Rid = new Property(1, String.class, "rid", false, "RID");
        public final static Property TeacherDesc = new Property(2, String.class, "TeacherDesc", false, "TEACHER_DESC");
        public final static Property Title = new Property(3, String.class, "Title", false, "TITLE");
        public final static Property ClassTitle = new Property(4, String.class, "classTitle", false, "CLASS_TITLE");
        public final static Property LessionCount = new Property(5, String.class, "lessionCount", false, "LESSION_COUNT");
        public final static Property Price = new Property(6, String.class, "price", false, "PRICE");
        public final static Property ActualPrice = new Property(7, Double.class, "ActualPrice", false, "ACTUAL_PRICE");
        public final static Property Scaleimg = new Property(8, String.class, "scaleimg", false, "SCALEIMG");
        public final static Property Buy_lives = new Property(9, String.class, "buy_lives", false, "BUY_LIVES");
        public final static Property Is_fufei = new Property(10, String.class, "is_fufei", false, "IS_FUFEI");
        public final static Property Content = new Property(11, String.class, "content", false, "CONTENT");
        public final static Property Is_zhibo = new Property(12, String.class, "is_zhibo", false, "IS_ZHIBO");
        public final static Property Passwd = new Property(13, String.class, "passwd", false, "PASSWD");
        public final static Property Yuming = new Property(14, String.class, "yuming", false, "YUMING");
        public final static Property Number = new Property(15, String.class, "number", false, "NUMBER");
        public final static Property Liveid = new Property(16, String.class, "liveid", false, "LIVEID");
        public final static Property Video_status = new Property(17, String.class, "video_status", false, "VIDEO_STATUS");
        public final static Property Riqi = new Property(18, String.class, "riqi", false, "RIQI");
        public final static Property Is_buy = new Property(19, String.class, "is_buy", false, "IS_BUY");
        public final static Property TimeLength = new Property(20, String.class, "timeLength", false, "TIME_LENGTH");
        public final static Property Zhibotime = new Property(21, String.class, "zhibotime", false, "ZHIBOTIME");
        public final static Property Zhiboendtime = new Property(22, String.class, "zhiboendtime", false, "ZHIBOENDTIME");
        public final static Property Kouling = new Property(23, String.class, "kouling", false, "KOULING");
        public final static Property Zhibourl = new Property(24, String.class, "zhibourl", false, "ZHIBOURL");
        public final static Property Lubourl = new Property(25, String.class, "lubourl", false, "LUBOURL");
        public final static Property EffectDateDesc = new Property(26, String.class, "EffectDateDesc", false, "EFFECT_DATE_DESC");
        public final static Property Photo_url = new Property(27, String.class, "photo_url", false, "PHOTO_URL");
        public final static Property Brief = new Property(28, String.class, "Brief", false, "BRIEF");
        public final static Property PhaseName = new Property(29, String.class, "phaseName", false, "PHASE_NAME");
        public final static Property ClassNo = new Property(30, String.class, "ClassNo", false, "CLASS_NO");
        public final static Property Is_living = new Property(31, String.class, "is_living", false, "IS_LIVING");
        public final static Property TypeName = new Property(32, String.class, "TypeName", false, "TYPE_NAME");
        public final static Property Seq = new Property(33, Integer.class, "seq", false, "SEQ");
        public final static Property IsHasJy = new Property(34, String.class, "isHasJy", false, "IS_HAS_JY");
        public final static Property VideoType = new Property(35, Integer.class, "videoType", false, "VIDEO_TYPE");
        public final static Property CcUid = new Property(36, String.class, "ccUid", false, "CC_UID");
        public final static Property CcApi_key = new Property(37, String.class, "ccApi_key", false, "CC_API_KEY");
        public final static Property CcCourses_id = new Property(38, String.class, "ccCourses_id", false, "CC_COURSES_ID");
        public final static Property IsTrial = new Property(39, Integer.class, "isTrial", false, "IS_TRIAL");
        public final static Property NetClassId = new Property(40, String.class, "NetClassId", false, "NET_CLASS_ID");
        public final static Property Netclass_pdf = new Property(41, String.class, "netclass_pdf", false, "NETCLASS_PDF");
        public final static Property Is_ax_Type = new Property(42, String.class, "is_ax_Type", false, "IS_AX__TYPE");
        public final static Property LocalPath = new Property(43, String.class, "localPath", false, "LOCAL_PATH");
        public final static Property Userid = new Property(44, String.class, "userid", false, "USERID");
        public final static Property Errorcode = new Property(45, String.class, "errorcode", false, "ERRORCODE");
        public final static Property Start = new Property(46, Long.class, "start", false, "START");
        public final static Property End = new Property(47, Long.class, "end", false, "END");
        public final static Property Position = new Property(48, Long.class, "position", false, "POSITION");
        public final static Property Down_status = new Property(49, String.class, "down_status", false, "DOWN_STATUS");
        public final static Property Footprint = new Property(50, Integer.class, "footprint", false, "FOOTPRINT");
        public final static Property Status = new Property(51, Integer.class, "status", false, "STATUS");
        public final static Property Camera = new Property(52, String.class, "camera", false, "CAMERA");
        public final static Property Customer = new Property(53, String.class, "customer", false, "CUSTOMER");
        public final static Property Hd = new Property(54, String.class, "hd", false, "HD");
        public final static Property Oid = new Property(55, String.class, "oid", false, "OID");
        public final static Property Is_next_day = new Property(56, String.class, "is_next_day", false, "IS_NEXT_DAY");
        public final static Property Pic = new Property(57, String.class, "pic", false, "PIC");
        public final static Property Common_problem = new Property(58, String.class, "Common_problem", false, "COMMON_PROBLEM");
        public final static Property Course = new Property(59, Integer.class, "course", false, "COURSE");
        public final static Property Is_last = new Property(60, Boolean.class, "is_last", false, "IS_LAST");
        public final static Property Bjytoken = new Property(61, String.class, "bjytoken", false, "BJYTOKEN");
        public final static Property Bjyvideoid = new Property(62, String.class, "bjyvideoid", false, "BJYVIDEOID");
        public final static Property Room_id = new Property(63, String.class, "room_id", false, "ROOM_ID");
        public final static Property Session_id = new Property(64, String.class, "session_id", false, "SESSION_ID");
        public final static Property Student_code = new Property(65, String.class, "student_code", false, "STUDENT_CODE");
        public final static Property Bjyhftoken = new Property(66, String.class, "bjyhftoken", false, "BJYHFTOKEN");
    };


    public DirectBeanDao(DaoConfig config) {
        super(config);
    }

    public DirectBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DIRECT_BEAN' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'RID' TEXT," + // 1: rid
                "'TEACHER_DESC' TEXT," + // 2: TeacherDesc
                "'TITLE' TEXT," + // 3: Title
                "'CLASS_TITLE' TEXT," + // 4: classTitle
                "'LESSION_COUNT' TEXT," + // 5: lessionCount
                "'PRICE' TEXT," + // 6: price
                "'ACTUAL_PRICE' REAL," + // 7: ActualPrice
                "'SCALEIMG' TEXT," + // 8: scaleimg
                "'BUY_LIVES' TEXT," + // 9: buy_lives
                "'IS_FUFEI' TEXT," + // 10: is_fufei
                "'CONTENT' TEXT," + // 11: content
                "'IS_ZHIBO' TEXT," + // 12: is_zhibo
                "'PASSWD' TEXT," + // 13: passwd
                "'YUMING' TEXT," + // 14: yuming
                "'NUMBER' TEXT," + // 15: number
                "'LIVEID' TEXT," + // 16: liveid
                "'VIDEO_STATUS' TEXT," + // 17: video_status
                "'RIQI' TEXT," + // 18: riqi
                "'IS_BUY' TEXT," + // 19: is_buy
                "'TIME_LENGTH' TEXT," + // 20: timeLength
                "'ZHIBOTIME' TEXT," + // 21: zhibotime
                "'ZHIBOENDTIME' TEXT," + // 22: zhiboendtime
                "'KOULING' TEXT," + // 23: kouling
                "'ZHIBOURL' TEXT," + // 24: zhibourl
                "'LUBOURL' TEXT," + // 25: lubourl
                "'EFFECT_DATE_DESC' TEXT," + // 26: EffectDateDesc
                "'PHOTO_URL' TEXT," + // 27: photo_url
                "'BRIEF' TEXT," + // 28: Brief
                "'PHASE_NAME' TEXT," + // 29: phaseName
                "'CLASS_NO' TEXT," + // 30: ClassNo
                "'IS_LIVING' TEXT," + // 31: is_living
                "'TYPE_NAME' TEXT," + // 32: TypeName
                "'SEQ' INTEGER," + // 33: seq
                "'IS_HAS_JY' TEXT," + // 34: isHasJy
                "'VIDEO_TYPE' INTEGER," + // 35: videoType
                "'CC_UID' TEXT," + // 36: ccUid
                "'CC_API_KEY' TEXT," + // 37: ccApi_key
                "'CC_COURSES_ID' TEXT," + // 38: ccCourses_id
                "'IS_TRIAL' INTEGER," + // 39: isTrial
                "'NET_CLASS_ID' TEXT," + // 40: NetClassId
                "'NETCLASS_PDF' TEXT," + // 41: netclass_pdf
                "'IS_AX__TYPE' TEXT," + // 42: is_ax_Type
                "'LOCAL_PATH' TEXT," + // 43: localPath
                "'USERID' TEXT," + // 44: userid
                "'ERRORCODE' TEXT," + // 45: errorcode
                "'START' INTEGER," + // 46: start
                "'END' INTEGER," + // 47: end
                "'POSITION' INTEGER," + // 48: position
                "'DOWN_STATUS' TEXT," + // 49: down_status
                "'FOOTPRINT' INTEGER," + // 50: footprint
                "'STATUS' INTEGER," + // 51: status
                "'CAMERA' TEXT," + // 52: camera
                "'CUSTOMER' TEXT," + // 53: customer
                "'HD' TEXT," + // 54: hd
                "'OID' TEXT," + // 55: oid
                "'IS_NEXT_DAY' TEXT," + // 56: is_next_day
                "'PIC' TEXT," + // 57: pic
                "'COMMON_PROBLEM' TEXT," + // 58: Common_problem
                "'COURSE' INTEGER," + // 59: course
                "'IS_LAST' INTEGER," + // 60: is_last
                "'BJYTOKEN' TEXT," + // 61: bjytoken
                "'BJYVIDEOID' TEXT," + // 62: bjyvideoid
                "'ROOM_ID' TEXT," + // 63: room_id
                "'SESSION_ID' TEXT," + // 64: session_id
                "'STUDENT_CODE' TEXT," + // 65: student_code
                "'BJYHFTOKEN' TEXT);"); // 66: bjyhftoken
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DIRECT_BEAN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DirectBean entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String rid = entity.getRid();
        if (rid != null) {
            stmt.bindString(2, rid);
        }

        String TeacherDesc = entity.getTeacherDesc();
        if (TeacherDesc != null) {
            stmt.bindString(3, TeacherDesc);
        }

        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(4, Title);
        }

        String classTitle = entity.getClassTitle();
        if (classTitle != null) {
            stmt.bindString(5, classTitle);
        }

        String lessionCount = entity.getLessionCount();
        if (lessionCount != null) {
            stmt.bindString(6, lessionCount);
        }

        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(7, price);
        }

        Double ActualPrice = entity.getActualPrice();
        if (ActualPrice != null) {
            stmt.bindDouble(8, ActualPrice);
        }

        String scaleimg = entity.getScaleimg();
        if (scaleimg != null) {
            stmt.bindString(9, scaleimg);
        }

        String buy_lives = entity.getBuy_lives();
        if (buy_lives != null) {
            stmt.bindString(10, buy_lives);
        }

        String is_fufei = entity.getIs_fufei();
        if (is_fufei != null) {
            stmt.bindString(11, is_fufei);
        }

        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(12, content);
        }

        String is_zhibo = entity.getIs_zhibo();
        if (is_zhibo != null) {
            stmt.bindString(13, is_zhibo);
        }

        String passwd = entity.getPasswd();
        if (passwd != null) {
            stmt.bindString(14, passwd);
        }

        String yuming = entity.getYuming();
        if (yuming != null) {
            stmt.bindString(15, yuming);
        }

        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(16, number);
        }

        String liveid = entity.getLiveid();
        if (liveid != null) {
            stmt.bindString(17, liveid);
        }

        String video_status = entity.getVideo_status();
        if (video_status != null) {
            stmt.bindString(18, video_status);
        }

        String riqi = entity.getRiqi();
        if (riqi != null) {
            stmt.bindString(19, riqi);
        }

        String is_buy = entity.getIs_buy();
        if (is_buy != null) {
            stmt.bindString(20, is_buy);
        }

        String timeLength = entity.getTimeLength();
        if (timeLength != null) {
            stmt.bindString(21, timeLength);
        }

        String zhibotime = entity.getZhibotime();
        if (zhibotime != null) {
            stmt.bindString(22, zhibotime);
        }

        String zhiboendtime = entity.getZhiboendtime();
        if (zhiboendtime != null) {
            stmt.bindString(23, zhiboendtime);
        }

        String kouling = entity.getKouling();
        if (kouling != null) {
            stmt.bindString(24, kouling);
        }

        String zhibourl = entity.getZhibourl();
        if (zhibourl != null) {
            stmt.bindString(25, zhibourl);
        }

        String lubourl = entity.getLubourl();
        if (lubourl != null) {
            stmt.bindString(26, lubourl);
        }

        String EffectDateDesc = entity.getEffectDateDesc();
        if (EffectDateDesc != null) {
            stmt.bindString(27, EffectDateDesc);
        }

        String photo_url = entity.getPhoto_url();
        if (photo_url != null) {
            stmt.bindString(28, photo_url);
        }

        String Brief = entity.getBrief();
        if (Brief != null) {
            stmt.bindString(29, Brief);
        }

        String phaseName = entity.getPhaseName();
        if (phaseName != null) {
            stmt.bindString(30, phaseName);
        }

        String ClassNo = entity.getClassNo();
        if (ClassNo != null) {
            stmt.bindString(31, ClassNo);
        }

        String is_living = entity.getIs_living();
        if (is_living != null) {
            stmt.bindString(32, is_living);
        }

        String TypeName = entity.getTypeName();
        if (TypeName != null) {
            stmt.bindString(33, TypeName);
        }

        Integer seq = entity.getSeq();
        if (seq != null) {
            stmt.bindLong(34, seq);
        }

        String isHasJy = entity.getIsHasJy();
        if (isHasJy != null) {
            stmt.bindString(35, isHasJy);
        }

        Integer videoType = entity.getVideoType();
        if (videoType != null) {
            stmt.bindLong(36, videoType);
        }

        String ccUid = entity.getCcUid();
        if (ccUid != null) {
            stmt.bindString(37, ccUid);
        }

        String ccApi_key = entity.getCcApi_key();
        if (ccApi_key != null) {
            stmt.bindString(38, ccApi_key);
        }

        String ccCourses_id = entity.getCcCourses_id();
        if (ccCourses_id != null) {
            stmt.bindString(39, ccCourses_id);
        }

        Integer isTrial = entity.getIsTrial();
        if (isTrial != null) {
            stmt.bindLong(40, isTrial);
        }

        String NetClassId = entity.getNetClassId();
        if (NetClassId != null) {
            stmt.bindString(41, NetClassId);
        }

        String netclass_pdf = entity.getNetclass_pdf();
        if (netclass_pdf != null) {
            stmt.bindString(42, netclass_pdf);
        }

        String is_ax_Type = entity.getIs_ax_Type();
        if (is_ax_Type != null) {
            stmt.bindString(43, is_ax_Type);
        }

        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(44, localPath);
        }

        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(45, userid);
        }

        String errorcode = entity.getErrorcode();
        if (errorcode != null) {
            stmt.bindString(46, errorcode);
        }

        Long start = entity.getStart();
        if (start != null) {
            stmt.bindLong(47, start);
        }

        Long end = entity.getEnd();
        if (end != null) {
            stmt.bindLong(48, end);
        }

        Long position = entity.getPosition();
        if (position != null) {
            stmt.bindLong(49, position);
        }

        String down_status = entity.getDown_status();
        if (down_status != null) {
            stmt.bindString(50, down_status);
        }

        Integer footprint = entity.getFootprint();
        if (footprint != null) {
            stmt.bindLong(51, footprint);
        }

        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(52, status);
        }

        String camera = entity.getCamera();
        if (camera != null) {
            stmt.bindString(53, camera);
        }

        String customer = entity.getCustomer();
        if (customer != null) {
            stmt.bindString(54, customer);
        }

        String hd = entity.getHd();
        if (hd != null) {
            stmt.bindString(55, hd);
        }

        String oid = entity.getOid();
        if (oid != null) {
            stmt.bindString(56, oid);
        }

        String is_next_day = entity.getIs_next_day();
        if (is_next_day != null) {
            stmt.bindString(57, is_next_day);
        }

        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(58, pic);
        }

        String Common_problem = entity.getCommon_problem();
        if (Common_problem != null) {
            stmt.bindString(59, Common_problem);
        }

        Integer course = entity.getCourse();
        if (course != null) {
            stmt.bindLong(60, course);
        }

        Boolean is_last = entity.getIs_last();
        if (is_last != null) {
            stmt.bindLong(61, is_last ? 1l: 0l);
        }

        String bjytoken = entity.getBjytoken();
        if (bjytoken != null) {
            stmt.bindString(62, bjytoken);
        }

        String bjyvideoid = entity.getBjyvideoid();
        if (bjyvideoid != null) {
            stmt.bindString(63, bjyvideoid);
        }

        String room_id = entity.getRoom_id();
        if (room_id != null) {
            stmt.bindString(64, room_id);
        }

        String session_id = entity.getSession_id();
        if (session_id != null) {
            stmt.bindString(65, session_id);
        }

        String student_code = entity.getStudent_code();
        if (student_code != null) {
            stmt.bindString(66, student_code);
        }

        String bjyhftoken = entity.getBjyhftoken();
        if (bjyhftoken != null) {
            stmt.bindString(67, bjyhftoken);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public DirectBean readEntity(Cursor cursor, int offset) {
        DirectBean entity = new DirectBean( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // rid
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // TeacherDesc
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Title
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // classTitle
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lessionCount
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // price
                cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // ActualPrice
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // scaleimg
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // buy_lives
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // is_fufei
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // content
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // is_zhibo
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // passwd
                cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // yuming
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // number
                cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // liveid
                cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // video_status
                cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // riqi
                cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // is_buy
                cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // timeLength
                cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // zhibotime
                cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // zhiboendtime
                cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // kouling
                cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // zhibourl
                cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // lubourl
                cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // EffectDateDesc
                cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // photo_url
                cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // Brief
                cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // phaseName
                cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // ClassNo
                cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // is_living
                cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // TypeName
                cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33), // seq
                cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // isHasJy
                cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35), // videoType
                cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // ccUid
                cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // ccApi_key
                cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // ccCourses_id
                cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39), // isTrial
                cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // NetClassId
                cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // netclass_pdf
                cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // is_ax_Type
                cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // localPath
                cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // userid
                cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // errorcode
                cursor.isNull(offset + 46) ? null : cursor.getLong(offset + 46), // start
                cursor.isNull(offset + 47) ? null : cursor.getLong(offset + 47), // end
                cursor.isNull(offset + 48) ? null : cursor.getLong(offset + 48), // position
                cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // down_status
                cursor.isNull(offset + 50) ? null : cursor.getInt(offset + 50), // footprint
                cursor.isNull(offset + 51) ? null : cursor.getInt(offset + 51), // status
                cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // camera
                cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53), // customer
                cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // hd
                cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // oid
                cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // is_next_day
                cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // pic
                cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58), // Common_problem
                cursor.isNull(offset + 59) ? null : cursor.getInt(offset + 59), // course
                cursor.isNull(offset + 60) ? null : cursor.getShort(offset + 60) != 0, // is_last
                cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61), // bjytoken
                cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62), // bjyvideoid
                cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63), // room_id
                cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64), // session_id
                cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65), // student_code
                cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66) // bjyhftoken
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DirectBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTeacherDesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClassTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLessionCount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrice(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setActualPrice(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setScaleimg(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBuy_lives(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIs_fufei(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setContent(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIs_zhibo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPasswd(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setYuming(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setNumber(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLiveid(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setVideo_status(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setRiqi(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIs_buy(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTimeLength(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setZhibotime(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setZhiboendtime(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setKouling(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setZhibourl(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setLubourl(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setEffectDateDesc(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setPhoto_url(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setBrief(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setPhaseName(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setClassNo(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setIs_living(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setTypeName(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setSeq(cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33));
        entity.setIsHasJy(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setVideoType(cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35));
        entity.setCcUid(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setCcApi_key(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setCcCourses_id(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setIsTrial(cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39));
        entity.setNetClassId(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setNetclass_pdf(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setIs_ax_Type(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setLocalPath(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setUserid(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setErrorcode(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setStart(cursor.isNull(offset + 46) ? null : cursor.getLong(offset + 46));
        entity.setEnd(cursor.isNull(offset + 47) ? null : cursor.getLong(offset + 47));
        entity.setPosition(cursor.isNull(offset + 48) ? null : cursor.getLong(offset + 48));
        entity.setDown_status(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setFootprint(cursor.isNull(offset + 50) ? null : cursor.getInt(offset + 50));
        entity.setStatus(cursor.isNull(offset + 51) ? null : cursor.getInt(offset + 51));
        entity.setCamera(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setCustomer(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
        entity.setHd(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.setOid(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.setIs_next_day(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setPic(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setCommon_problem(cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58));
        entity.setCourse(cursor.isNull(offset + 59) ? null : cursor.getInt(offset + 59));
        entity.setIs_last(cursor.isNull(offset + 60) ? null : cursor.getShort(offset + 60) != 0);
        entity.setBjytoken(cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61));
        entity.setBjyvideoid(cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62));
        entity.setRoom_id(cursor.isNull(offset + 63) ? null : cursor.getString(offset + 63));
        entity.setSession_id(cursor.isNull(offset + 64) ? null : cursor.getString(offset + 64));
        entity.setStudent_code(cursor.isNull(offset + 65) ? null : cursor.getString(offset + 65));
        entity.setBjyhftoken(cursor.isNull(offset + 66) ? null : cursor.getString(offset + 66));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DirectBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(DirectBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
