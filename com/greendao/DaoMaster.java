package com.greendao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.greendao.StudyRecordsDao;
import com.greendao.ExerciseDownloadPackageDao;
import com.greendao.QuestionDetailDao;
import com.greendao.ExerciseStoreDao;
import com.greendao.ExamSubjectDao;
import com.greendao.ChapterTreeDao;
import com.greendao.DirectBeanDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 6;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        StudyRecordsDao.createTable(db, ifNotExists);
        ExerciseDownloadPackageDao.createTable(db, ifNotExists);
        QuestionDetailDao.createTable(db, ifNotExists);
        ExerciseStoreDao.createTable(db, ifNotExists);
        ExamSubjectDao.createTable(db, ifNotExists);
        ChapterTreeDao.createTable(db, ifNotExists);
        DirectBeanDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        StudyRecordsDao.dropTable(db, ifExists);
        ExerciseDownloadPackageDao.dropTable(db, ifExists);
        QuestionDetailDao.dropTable(db, ifExists);
        ExerciseStoreDao.dropTable(db, ifExists);
        ExamSubjectDao.dropTable(db, ifExists);
        ChapterTreeDao.dropTable(db, ifExists);
        DirectBeanDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            DebugUtil.e("DaoMaster:DevOpenHelper" + "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            oldVersion = oldVersion+1;
            while (oldVersion <= newVersion){
                switch (oldVersion){
                    case 1:
                        oldVersion++;
                        break;
                    case 2:
                        createDirectBeanTables(db,false);
                        oldVersion++;
                        break;
                    case 3:
                        DebugUtil.e("DaoMaster:DevOpenHelper"+"case 3:");
                        //升级数据库添加 课程添加classtitle课程标题和课程状态
                        db.execSQL("ALTER TABLE DIRECT_BEAN ADD COLUMN CLASS_TITLE TEXT");
                        db.execSQL("ALTER TABLE DIRECT_BEAN ADD COLUMN STATUS INTEGER");
                        oldVersion++;
                        break;
                    case 4:
                        DebugUtil.e("DaoMaster:DevOpenHelper" + "case 4:");
                        //升级数据库DIRECT_BEAN添加camera QUESTION_DETAIL添加加分说明
                        db.execSQL("ALTER TABLE DIRECT_BEAN ADD COLUMN CAMERA TEXT");
                        db.execSQL("ALTER TABLE QUESTION_DETAIL ADD COLUMN EXTENSION TEXT");
                        oldVersion++;

                        break;
                    case 5:
                        DebugUtil.e("DaoMaster:DevOpenHelper" + "case 5:");
                        //升级数据库DIRECT_BEAN添加乐语咨询链接 是否高清 订单id QUESTION_DETAIL添加本题的状态
                        db.execSQL("ALTER TABLE DIRECT_BEAN ADD COLUMN CUSTOMER TEXT");
                        db.execSQL("ALTER TABLE DIRECT_BEAN ADD COLUMN HD TEXT");
                        db.execSQL("ALTER TABLE DIRECT_BEAN ADD COLUMN OID TEXT");
                        db.execSQL("ALTER TABLE QUESTION_DETAIL ADD COLUMN stateQuestion TEXT");
                        oldVersion++;
                        break;
                    case 6:
                        DebugUtil.e("DaoMaster:DevOpenHelper" + "case 6:");
                        //升级数据库DIRECT_BEAN添加24小时是否是今天直播 默认播放图片 常见问题 我的直播课是否有通知 教师评价弹窗 百家云播放token 百家云视频id
                        db.execSQL("ALTER TABLE DIRECT_BEAN ADD COLUMN is_next_day TEXT");
                        db.execSQL("ALTER TABLE DIRECT_BEAN ADD COLUMN pic TEXT");
                        db.execSQL("ALTER TABLE DIRECT_BEAN ADD COLUMN Common_problem TEXT");
                        db.execSQL("ALTER TABLE DIRECT_BEAN ADD COLUMN course INTEGER");
                        db.execSQL("ALTER TABLE DIRECT_BEAN ADD COLUMN is_last TEXT");
                        db.execSQL("ALTER TABLE DIRECT_BEAN ADD COLUMN bjytoken TEXT");
                        db.execSQL("ALTER TABLE DIRECT_BEAN ADD COLUMN bjyvideoid TEXT");
                        oldVersion++;
                        break;
                    case 7:
                        DebugUtil.e("DaoMaster:DevOpenHelper" + "case 7:");
                        oldVersion++;
                        break;
                    default:
//                    dropAllTables(db, true);
//                    onCreate(db);
                        break;
                }
            }
        }
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(StudyRecordsDao.class);
        registerDaoClass(ExerciseDownloadPackageDao.class);
        registerDaoClass(QuestionDetailDao.class);
        registerDaoClass(ExerciseStoreDao.class);
        registerDaoClass(ExamSubjectDao.class);
        registerDaoClass(ChapterTreeDao.class);
        registerDaoClass(DirectBeanDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    /**
     * Creates underlying database table using DAOs.
     */
    public static void createDirectBeanTables(SQLiteDatabase db, boolean ifNotExists) {
        DirectBeanDao.createTable(db, ifNotExists);
    }
    /**
     * Drops underlying database table using DAOs.
     */
    public static void dropDirectBeanTables(SQLiteDatabase db, boolean ifExists) {
        DirectBeanDao.dropTable(db, ifExists);
    }
    
}
