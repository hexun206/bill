package com.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.greendao.ExerciseStore;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EXERCISE_STORE.
*/
public class ExerciseStoreDao extends AbstractDao<ExerciseStore, String> {

    public static final String TABLENAME = "EXERCISE_STORE";

    /**
     * Properties of entity ExerciseStore.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Qid = new Property(0, String.class, "qid", true, "QID");
        public final static Property Userid = new Property(1, String.class, "userid", false, "USERID");
    };


    public ExerciseStoreDao(DaoConfig config) {
        super(config);
    }
    
    public ExerciseStoreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EXERCISE_STORE' (" + //
                "'QID' TEXT PRIMARY KEY NOT NULL ," + // 0: qid
                "'USERID' TEXT);"); // 1: userid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EXERCISE_STORE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ExerciseStore entity) {
        stmt.clearBindings();
 
        String qid = entity.getQid();
        if (qid != null) {
            stmt.bindString(1, qid);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ExerciseStore readEntity(Cursor cursor, int offset) {
        ExerciseStore entity = new ExerciseStore( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // qid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // userid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ExerciseStore entity, int offset) {
        entity.setQid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ExerciseStore entity, long rowId) {
        return entity.getQid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ExerciseStore entity) {
        if(entity != null) {
            return entity.getQid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
