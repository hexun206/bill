package com.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.greendao.ChapterTree;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CHAPTER_TREE.
 */
public class ChapterTreeDao extends AbstractDao<ChapterTree, String> {

    public static final String TABLENAME = "CHAPTER_TREE";

    /**
     * Properties of entity ChapterTree.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Chaptertree = new Property(1, String.class, "chaptertree", false, "CHAPTERTREE");
        public final static Property Version = new Property(2, String.class, "version", false, "VERSION");
    }

    ;


    public ChapterTreeDao(DaoConfig config) {
        super(config);
    }

    public ChapterTreeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'CHAPTER_TREE' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'CHAPTERTREE' TEXT," + // 1: chaptertree
                "'VERSION' TEXT);"); // 2: version
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHAPTER_TREE'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChapterTree entity) {
        stmt.clearBindings();

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }

        String chaptertree = entity.getChaptertree();
        if (chaptertree != null) {
            stmt.bindString(2, chaptertree);
        }

        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(3, version);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public ChapterTree readEntity(Cursor cursor, int offset) {
        ChapterTree entity = new ChapterTree( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // chaptertree
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // version
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, ChapterTree entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setChaptertree(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVersion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected String updateKeyAfterInsert(ChapterTree entity, long rowId) {
        return entity.getId();
    }

    /**
     * @inheritdoc
     */
    @Override
    public String getKey(ChapterTree entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
