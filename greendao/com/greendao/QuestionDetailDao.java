package com.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.greendao.QuestionDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table QUESTION_DETAIL.
 */
public class QuestionDetailDao extends AbstractDao<QuestionDetail, Void> {

    public static final String TABLENAME = "QUESTION_DETAIL";

    /**
     * Properties of entity QuestionDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Choices = new Property(1, String.class, "choices", false, "CHOICES");
        public final static Property Qid = new Property(2, String.class, "qid", false, "QID");
        public final static Property Answers = new Property(3, String.class, "answers", false, "ANSWERS");
        public final static Property Author = new Property(4, String.class, "author", false, "AUTHOR");
        public final static Property Comment = new Property(5, String.class, "comment", false, "COMMENT");
        public final static Property Question = new Property(6, String.class, "question", false, "QUESTION");
        public final static Property Qpoint = new Property(7, String.class, "qpoint", false, "QPOINT");
        public final static Property Qrootpoint = new Property(8, String.class, "qrootpoint", false, "QROOTPOINT");
        public final static Property Content = new Property(9, String.class, "content", false, "CONTENT");
        public final static Property Score = new Property(10, String.class, "score", false, "SCORE");
        public final static Property Qvideo = new Property(11, String.class, "qvideo", false, "QVIDEO");
        public final static Property Qtype = new Property(12, String.class, "qtype", false, "QTYPE");
    }

    ;


    public QuestionDetailDao(DaoConfig config) {
        super(config);
    }

    public QuestionDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'QUESTION_DETAIL' (" + //
                "'ID' TEXT," + // 0: id
                "'CHOICES' TEXT," + // 1: choices
                "'QID' TEXT," + // 2: qid
                "'ANSWERS' TEXT," + // 3: answers
                "'AUTHOR' TEXT," + // 4: author
                "'COMMENT' TEXT," + // 5: comment
                "'QUESTION' TEXT," + // 6: question
                "'QPOINT' TEXT," + // 7: qpoint
                "'QROOTPOINT' TEXT," + // 8: qrootpoint
                "'CONTENT' TEXT," + // 9: content
                "'SCORE' TEXT," + // 10: score
                "'QVIDEO' TEXT," + // 11: qvideo
                "'QTYPE' TEXT);"); // 12: qtype
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'QUESTION_DETAIL'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, QuestionDetail entity) {
        stmt.clearBindings();

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }

        String choices = entity.getChoices();
        if (choices != null) {
            stmt.bindString(2, choices);
        }

        String qid = entity.getQid();
        if (qid != null) {
            stmt.bindString(3, qid);
        }

        String answers = entity.getAnswers();
        if (answers != null) {
            stmt.bindString(4, answers);
        }

        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(5, author);
        }

        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(6, comment);
        }

        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(7, question);
        }

        String qpoint = entity.getQpoint();
        if (qpoint != null) {
            stmt.bindString(8, qpoint);
        }

        String qrootpoint = entity.getQrootpoint();
        if (qrootpoint != null) {
            stmt.bindString(9, qrootpoint);
        }

        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(10, content);
        }

        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(11, score);
        }

        String qvideo = entity.getQvideo();
        if (qvideo != null) {
            stmt.bindString(12, qvideo);
        }

        String qtype = entity.getQtype();
        if (qtype != null) {
            stmt.bindString(13, qtype);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public QuestionDetail readEntity(Cursor cursor, int offset) {
        QuestionDetail entity = new QuestionDetail( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // choices
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // qid
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // answers
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // author
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // comment
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // question
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // qpoint
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // qrootpoint
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // content
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // score
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // qvideo
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // qtype
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, QuestionDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setChoices(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAnswers(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAuthor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setComment(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQuestion(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQpoint(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setQrootpoint(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setContent(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setScore(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setQvideo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setQtype(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(QuestionDetail entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(QuestionDetail entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
